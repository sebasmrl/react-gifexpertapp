{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","index","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OACQ,sBAAMC,SAZQ,SAACC,GACnBA,EAAEC,iBAGCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMd,SAEI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAtBU,SAAEP,GAExBF,EAAcE,EAAEQ,OAAOF,a,+BCVlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAGbC,EAHa,iDAGmCC,UAAUH,GAH7C,+DAKAI,MAAMF,GALN,cAKbG,EALa,gBAMEA,EAAKC,OANP,uBAMZC,EANY,EAMZA,KAGDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAbvB,kBAiBZM,GAjBY,4CAAH,sDCEPO,EAAc,SAAC,GAAsB,IAArBJ,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGpC,OADAc,QAAQC,IAAI,CAACN,KAAIC,QAAOV,QAEpB,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCJHS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAIrB,ECLwB,SAACA,GAEzB,MAA0Bd,mBACtB,CACIqB,KAAM,GACNe,SAAS,IAHjB,mBAAOC,EAAP,KAAcC,EAAd,KAsBA,OAfAC,qBAAU,WACN1B,EAAQC,GACH0B,MAAK,SAAAlB,GAGFgB,EAAS,CACLjB,KAAMC,EACNc,SAAS,SAKtB,CAACtB,IAGGuB,EDnB0BI,CAAa3B,GAAjCa,EAAb,EAAON,KAAce,EAArB,EAAqBA,QAIrB,OACI,qCACA,oBAAIJ,UAAU,oCAAd,SAAmDlB,IAElDsB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAGYL,EAAOJ,KAAK,SAAAC,GAAG,OACV,cAAC,EAAD,eAEOA,GADCA,EAAIC,aEnBxBiB,EAAe,WAExB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAMA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAIA,6BAEQ4C,EAAWpB,KAAI,SAACT,EAAU8B,GAAX,OACX,cAAC,EAAD,CAEI9B,SAAYA,GADLA,Y,MClBnC+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.3c960b4d.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setinputValue] = useState('')\r\n\r\n    \r\n    const haddleInputChange = ( e ) => {\r\n        //console.log(e.target.value)\r\n        setinputValue(e.target.value)\r\n    }\r\n\r\n    const handdleSubmit = (e) => {\r\n        e.preventDefault()\r\n        //console.log('Submit Hecho', )\r\n\r\n        if(inputValue.trim().length>2){\r\n            setCategories(cats => [inputValue, ...cats])\r\n            setinputValue('');\r\n        }\r\n    } \r\n\r\n\r\n    return (\r\n            <form onSubmit={handdleSubmit}>\r\n                {/* <h1>{inputValue}</h1> */}\r\n                <input \r\n                    type='text'\r\n                    value={inputValue}\r\n                    onChange={haddleInputChange}\r\n                />  \r\n            </form>\r\n    ) \r\n}\r\n\r\nAddCategory.propTypes = {\r\n        setCategories : PropTypes.func.isRequired\r\n    }\r\n","export const getGifs = async(category) => {\r\n        \r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=jIJ22etInUGvAMi56Q2qiTENp00eCk0t`\r\n\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    //console.log(data);\r\n\r\n    const gifs = data.map(img =>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    //console.log(gifs)\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    console.log({id, title, url})\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport {GifGridItem} from './GifGridItem'\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n\r\n    //Hooks - custom hooks\r\n    const {data: images, loading } = useFetchGifs(category);\r\n    //console.log(loading)\r\n    \r\n    \r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n        {loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n        \r\n        <div className=\"card-grid\">\r\n                \r\n                {\r\n                    images.map( img =>(\r\n                         <GifGridItem \r\n                            key={img.id}\r\n                            {...img}\r\n                         />\r\n                    ))\r\n                }\r\n                \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n   \r\n    const [state, setState] = useState(\r\n        {\r\n            data: [],\r\n            loading: true\r\n        }\r\n    );\r\n    \r\n    useEffect(()=>{\r\n        getGifs(category) //uso del helper\r\n            .then(gifs => {\r\n                \r\n                //hook para cambiar la informacion\r\n                setState({ \r\n                    data: gifs,\r\n                    loading: false\r\n                });   \r\n                \r\n                \r\n            })\r\n    }, [category]); //si category cambia se renderiza de nuevo aunque por la logica este no se modifica (cargaria de nuevo un item como ej: one punch)\r\n\r\n\r\n    return state\r\n}","import React, {useState} from 'react'\r\nimport { AddCategory} from './components/AddCategory'\r\nimport { GifGrid} from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n    /* const handlerAdd=()=>{\r\n        //setcategories(['Seven Deadly Sins',...categories]); //aqui puede venir una callback\r\n        setcategories(cats => ['Seven Deadly Sins',...cats]); //aqui puede venir una callback\r\n    } */\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = {setCategories}/>\r\n            <hr/>\r\n\r\n           \r\n\r\n            <ul>\r\n                { \r\n                    categories.map((category, index) => (\r\n                        <GifGrid \r\n                            key = {category}\r\n                            category = {category} />\r\n                        ))\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}